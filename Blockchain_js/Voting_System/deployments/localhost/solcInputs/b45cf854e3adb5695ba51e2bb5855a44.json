{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Vote.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror Vote__NoteRegistered();\nerror Vote__FoodNotExists();\nerror Vote__AccessDenied();\nerror Vote__AlreadyVoted();\n\ncontract Vote is Ownable {\n\tuint256 public constant MINIMUM_AGE_OF_VOTERS = 9;\n\n\tstruct Participants {\n\t\tstring name;\n\t\tuint256 age;\n\t\tstring election;\n\t\tbool vote;\n\t}\n\n\t//different options for vote\n\tstring[] internal Options = [\"Bad\", \"Notbad\", \"Good\", \"Awesome\"];\n\tParticipants[] internal registrationList;\n\tstring[] internal foodElectionList;\n\n\tmapping(string => address) internal nameToAddress;\n\tmapping(string => mapping(string => uint256)) internal foodIndexToFoodVote;\n\tmapping(address => uint256) internal addressToIndex;\n\n\tmodifier ageLimit(uint256 _age) {\n\t\trequire(\n\t\t\t_age >= MINIMUM_AGE_OF_VOTERS,\n\t\t\t\"your age is not enough for votign.\"\n\t\t);\n\t\t_;\n\t}\n\n\tmodifier checkFoodExistent(string memory _election) {\n\t\tstring[] memory newfoodElectionList = getElectionsList();\n\t\tbool found = false;\n\t\tfor (uint256 index = 0; index < newfoodElectionList.length; index++) {\n\t\t\tif (\n\t\t\t\tkeccak256(abi.encodePacked(_election)) ==\n\t\t\t\tkeccak256(abi.encodePacked(newfoodElectionList[index]))\n\t\t\t) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found) {\n\t\t\trevert Vote__FoodNotExists();\n\t\t}\n\t\t_;\n\t}\n\n\t// registration of all Participants\n\tfunction registration(\n\t\tstring memory _name,\n\t\tuint256 _age,\n\t\tstring memory _election\n\t) public ageLimit(_age) checkFoodExistent(_election) {\n\t\tregistrationList.push(Participants(_name, _age, _election, false));\n\t\tnameToAddress[_name] = msg.sender;\n\t\taddressToIndex[msg.sender] = (registrationList.length) - 1;\n\t}\n\n\t//Election list by Owner\n\tfunction electionList(string[] calldata _foodName) public onlyOwner {\n\t\tfor (uint256 i = 0; i < _foodName.length; i++) {\n\t\t\tfoodElectionList.push(_foodName[i]);\n\t\t}\n\t}\n\n\t//Vote counting && voting anonymously\n\tfunction vote(\n\t\tstring memory _name,\n\t\tuint256 _foodIndex,\n\t\tuint256 _statusIndex\n\t) public {\n\t\tif (\n\t\t\tkeccak256(\n\t\t\t\tabi.encodePacked(\n\t\t\t\t\tregistrationList[addressToIndex[msg.sender]].election\n\t\t\t\t)\n\t\t\t) != keccak256(abi.encodePacked(foodElectionList[_foodIndex]))\n\t\t) {\n\t\t\trevert Vote__AccessDenied();\n\t\t}\n\t\tif (registrationList[addressToIndex[msg.sender]].vote == true) {\n\t\t\trevert Vote__AlreadyVoted();\n\t\t} else {\n\t\t\tregistrationList[addressToIndex[msg.sender]].vote = true;\n\t\t}\n\n\t\tstring[] memory electionsList = getElectionsList();\n\t\tstring[] memory options = getOptionsList();\n\t\tif (nameToAddress[_name] != msg.sender) {\n\t\t\trevert Vote__NoteRegistered();\n\t\t}\n\t\tfoodIndexToFoodVote[electionsList[_foodIndex]][options[_statusIndex]]++;\n\t}\n\n\t//Results publishing\n\tfunction electionResult(\n\t\tstring memory _foodName\n\t)\n\t\tpublic\n\t\tview\n\t\treturns (uint256 Bad, uint256 Notbad, uint256 Good, uint256 Awesome)\n\t{\n\t\tuint256 badVots = foodIndexToFoodVote[_foodName][\"Bad\"];\n\t\tuint256 notbadVots = foodIndexToFoodVote[_foodName][\"Notbad\"];\n\t\tuint256 GoodVots = foodIndexToFoodVote[_foodName][\"Good\"];\n\t\tuint256 awesomeVots = foodIndexToFoodVote[_foodName][\"Awesome\"];\n\t\treturn (badVots, notbadVots, GoodVots, awesomeVots);\n\t}\n\n\t// showing different elections\n\tfunction getElectionsList() public view returns (string[] memory) {\n\t\treturn foodElectionList;\n\t}\n\n\t// showing different options\n\tfunction getOptionsList() public view returns (string[] memory) {\n\t\treturn Options;\n\t}\n\n\t//getting participantes\n\t// function getParticipants() internal view returns (Participants[] memory) {\n\t// \treturn registrationList;\n\t// }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}