{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "Vote__AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vote__AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vote__FoodNotExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vote__NoteRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_AGE_OF_VOTERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_foodName",
          "type": "string[]"
        }
      ],
      "name": "electionList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_foodName",
          "type": "string"
        }
      ],
      "name": "electionResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "Bad",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Notbad",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Good",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Awesome",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getElectionsList",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOptionsList",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_election",
          "type": "string"
        }
      ],
      "name": "registration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_foodIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusIndex",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x65c8398ee4cd6bad26a9d679ca57c8d5b0a64d87db73d5a8a06d8ef43b628313",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1659807",
    "logsBloom": "0x
    "blockHash": "0x243f09c26303f957c83c90b677a88f39fe3f07187905234dbf0b2c9411432609",
    "transactionHash": "0x65c8398ee4cd6bad26a9d679ca57c8d5b0a64d87db73d5a8a06d8ef43b628313",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x65c8398ee4cd6bad26a9d679ca57c8d5b0a64d87db73d5a8a06d8ef43b628313",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x243f09c26303f957c83c90b677a88f39fe3f07187905234dbf0b2c9411432609"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1659807",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6b4cd10f61da0634ffa6e3d388397599",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Vote__AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vote__AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vote__FoodNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vote__NoteRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_AGE_OF_VOTERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_foodName\",\"type\":\"string[]\"}],\"name\":\"electionList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foodName\",\"type\":\"string\"}],\"name\":\"electionResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Bad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Notbad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Good\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Awesome\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElectionsList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptionsList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_election\",\"type\":\"string\"}],\"name\":\"registration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_foodIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusIndex\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vote.sol\":\"Vote\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Vote__NoteRegistered();\\nerror Vote__FoodNotExists();\\nerror Vote__AccessDenied();\\nerror Vote__AlreadyVoted();\\n\\ncontract Vote is Ownable {\\n\\tuint256 public constant MINIMUM_AGE_OF_VOTERS = 9;\\n\\n\\tstruct Participants {\\n\\t\\tstring name;\\n\\t\\tuint256 age;\\n\\t\\tstring election;\\n\\t\\tbool vote;\\n\\t}\\n\\n\\t//different options for vote\\n\\tstring[] internal Options = [\\\"Bad\\\", \\\"Notbad\\\", \\\"Good\\\", \\\"Awesome\\\"];\\n\\tParticipants[] internal registrationList;\\n\\tstring[] internal foodElectionList;\\n\\n\\tmapping(string => address) internal nameToAddress;\\n\\tmapping(string => mapping(string => uint256)) internal foodIndexToFoodVote;\\n\\tmapping(address => uint256) internal addressToIndex;\\n\\n\\tmodifier ageLimit(uint256 _age) {\\n\\t\\trequire(\\n\\t\\t\\t_age >= MINIMUM_AGE_OF_VOTERS,\\n\\t\\t\\t\\\"your age is not enough for votign.\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkFoodExistent(string memory _election) {\\n\\t\\tstring[] memory newfoodElectionList = getElectionsList();\\n\\t\\tbool found = false;\\n\\t\\tfor (uint256 index = 0; index < newfoodElectionList.length; index++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_election)) ==\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(newfoodElectionList[index]))\\n\\t\\t\\t) {\\n\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!found) {\\n\\t\\t\\trevert Vote__FoodNotExists();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t//Election list by Owner\\n\\tfunction electionList(string[] calldata _foodName) public onlyOwner {\\n\\t\\tfor (uint256 i = 0; i < _foodName.length; i++) {\\n\\t\\t\\tfoodElectionList.push(_foodName[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t// registration of all Participants\\n\\tfunction registration(\\n\\t\\tstring memory _name,\\n\\t\\tuint256 _age,\\n\\t\\tstring memory _election\\n\\t) public ageLimit(_age) checkFoodExistent(_election) {\\n\\t\\tregistrationList.push(Participants(_name, _age, _election, false));\\n\\t\\tnameToAddress[_name] = msg.sender;\\n\\t\\taddressToIndex[msg.sender] = (registrationList.length) - 1;\\n\\t}\\n\\n\\t//Vote counting && voting anonymously\\n\\tfunction vote(\\n\\t\\tstring memory _name,\\n\\t\\tuint256 _foodIndex,\\n\\t\\tuint256 _statusIndex\\n\\t) public {\\n\\t\\tif (\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tregistrationList[addressToIndex[msg.sender]].election\\n\\t\\t\\t\\t)\\n\\t\\t\\t) != keccak256(abi.encodePacked(foodElectionList[_foodIndex]))\\n\\t\\t) {\\n\\t\\t\\trevert Vote__AccessDenied();\\n\\t\\t}\\n\\t\\tif (registrationList[addressToIndex[msg.sender]].vote == true) {\\n\\t\\t\\trevert Vote__AlreadyVoted();\\n\\t\\t} else {\\n\\t\\t\\tregistrationList[addressToIndex[msg.sender]].vote = true;\\n\\t\\t}\\n\\n\\t\\tstring[] memory electionsList = getElectionsList();\\n\\t\\tstring[] memory options = getOptionsList();\\n\\t\\tif (nameToAddress[_name] != msg.sender) {\\n\\t\\t\\trevert Vote__NoteRegistered();\\n\\t\\t}\\n\\t\\tfoodIndexToFoodVote[electionsList[_foodIndex]][options[_statusIndex]]++;\\n\\t}\\n\\n\\t//Results publishing\\n\\tfunction electionResult(\\n\\t\\tstring memory _foodName\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256 Bad, uint256 Notbad, uint256 Good, uint256 Awesome)\\n\\t{\\n\\t\\tuint256 badVots = foodIndexToFoodVote[_foodName][\\\"Bad\\\"];\\n\\t\\tuint256 notbadVots = foodIndexToFoodVote[_foodName][\\\"Notbad\\\"];\\n\\t\\tuint256 GoodVots = foodIndexToFoodVote[_foodName][\\\"Good\\\"];\\n\\t\\tuint256 awesomeVots = foodIndexToFoodVote[_foodName][\\\"Awesome\\\"];\\n\\t\\treturn (badVots, notbadVots, GoodVots, awesomeVots);\\n\\t}\\n\\n\\t// showing different elections\\n\\tfunction getElectionsList() public view returns (string[] memory) {\\n\\t\\treturn foodElectionList;\\n\\t}\\n\\n\\t// showing different options\\n\\tfunction getOptionsList() public view returns (string[] memory) {\\n\\t\\treturn Options;\\n\\t}\\n\\n\\t//getting participantes\\n\\t// function getParticipants() internal view returns (Participants[] memory) {\\n\\t// \\treturn registrationList;\\n\\t// }\\n}\\n\",\"keccak256\":\"0x43c5d5b0a24bd14451536298ad1d1894d941eb078f9c5c05eca961997d273e79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637650275f116100665780637650275f14610136578063845371fc146101525780638da5cb5b14610170578063cc6323f11461018e578063f2fde38b146101ac5761009e565b80630891d358146100a35780633586ffe3146100bf57806352720c4b146100dd57806370779b7b14610110578063715018a61461012c575b600080fd5b6100bd60048036038101906100b8919061109a565b6101c8565b005b6100c7610540565b6040516100d491906114ad565b60405180910390f35b6100f760048036038101906100f29190610fc6565b610545565b60405161010794939291906114c8565b60405180910390f35b61012a60048036038101906101259190610f79565b610656565b005b6101346106e5565b005b610150600480360381019061014b919061100f565b6106f9565b005b61015a61098a565b604051610167919061142b565b60405180910390f35b610178610a63565b6040516101859190611410565b60405180910390f35b610196610a8c565b6040516101a3919061142b565b60405180910390f35b6101c660048036038101906101c19190610f4c565b610b65565b005b600382815481106101dc576101db611808565b5b906000526020600020016040516020016101f691906113a5565b604051602081830303815290604052805190602001206002600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061025f5761025e611808565b5b906000526020600020906004020160020160405160200161028091906113a5565b60405160208183030381529060405280519060200120146102cd576040517f212eb0d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600115156002600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061032457610323611808565b5b906000526020600020906004020160030160009054906101000a900460ff161515141561037d576040517ff8e535ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106103d2576103d1611808565b5b906000526020600020906004020160030160006101000a81548160ff021916908315150217905550600061040461098a565b90506000610410610a8c565b90503373ffffffffffffffffffffffffffffffffffffffff16600486604051610439919061138e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104b5576040517f0c97a77200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60058285815181106104ca576104c9611808565b5b60200260200101516040516104df919061138e565b9081526020016040518091039020818481518110610500576104ff611808565b5b6020026020010151604051610515919061138e565b9081526020016040518091039020600081548092919061053490611761565b91905055505050505050565b600981565b600080600080600060058660405161055d919061138e565b9081526020016040518091039020604051610577906113fb565b9081526020016040518091039020549050600060058760405161059a919061138e565b90815260200160405180910390206040516105b4906113d1565b908152602001604051809103902054905060006005886040516105d7919061138e565b90815260200160405180910390206040516105f1906113e6565b90815260200160405180910390205490506000600589604051610614919061138e565b908152602001604051809103902060405161062e906113bc565b9081526020016040518091039020549050838383839750975097509750505050509193509193565b61065e610be9565b60005b828290508110156106e057600383838381811061068157610680611808565b5b9050602002810190610693919061150d565b909180600181540180825580915050600190039060005260206000200160009091929091929091929091925091906106cc929190610d33565b5080806106d890611761565b915050610661565b505050565b6106ed610be9565b6106f76000610c67565b565b81600981101561073e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107359061146d565b60405180910390fd5b81600061074961098a565b90506000805b82518110156107e25782818151811061076b5761076a611808565b5b6020026020010151604051602001610783919061138e565b60405160208183030381529060405280519060200120846040516020016107aa919061138e565b6040516020818303038152906040528051906020012014156107cf57600191506107e2565b80806107da90611761565b91505061074f565b508061081a576040517f0b7c834100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260405180608001604052808981526020018881526020018781526020016000151581525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000019080519060200190610885929190610db9565b506020820151816001015560408201518160020190805190602001906108ac929190610db9565b5060608201518160030160006101000a81548160ff0219169083151502179055505050336004886040516108e0919061138e565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160028054905061093e919061164c565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050505050565b60606003805480602002602001604051908101604052809291908181526020016000905b82821015610a5a5783829060005260206000200180546109cd906116fe565b80601f01602080910402602001604051908101604052809291908181526020018280546109f9906116fe565b8015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b5050505050815260200190600101906109ae565b50505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610b5c578382906000526020600020018054610acf906116fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610afb906116fe565b8015610b485780601f10610b1d57610100808354040283529160200191610b48565b820191906000526020600020905b815481529060010190602001808311610b2b57829003601f168201915b505050505081526020019060010190610ab0565b50505050905090565b610b6d610be9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd49061144d565b60405180910390fd5b610be681610c67565b50565b610bf1610d2b565b73ffffffffffffffffffffffffffffffffffffffff16610c0f610a63565b73ffffffffffffffffffffffffffffffffffffffff1614610c65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5c9061148d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b828054610d3f906116fe565b90600052602060002090601f016020900481019282610d615760008555610da8565b82601f10610d7a57803560ff1916838001178555610da8565b82800160010185558215610da8579182015b82811115610da7578235825591602001919060010190610d8c565b5b509050610db59190610e3f565b5090565b828054610dc5906116fe565b90600052602060002090601f016020900481019282610de75760008555610e2e565b82601f10610e0057805160ff1916838001178555610e2e565b82800160010185558215610e2e579182015b82811115610e2d578251825591602001919060010190610e12565b5b509050610e3b9190610e3f565b5090565b5b80821115610e58576000816000905550600101610e40565b5090565b6000610e6f610e6a84611595565b611570565b905082815260208101848484011115610e8b57610e8a611884565b5b610e968482856116bc565b509392505050565b600081359050610ead81611a0f565b92915050565b60008083601f840112610ec957610ec861186b565b5b8235905067ffffffffffffffff811115610ee657610ee5611866565b5b602083019150836020820283011115610f0257610f0161187a565b5b9250929050565b600082601f830112610f1e57610f1d61186b565b5b8135610f2e848260208601610e5c565b91505092915050565b600081359050610f4681611a26565b92915050565b600060208284031215610f6257610f6161188e565b5b6000610f7084828501610e9e565b91505092915050565b60008060208385031215610f9057610f8f61188e565b5b600083013567ffffffffffffffff811115610fae57610fad611889565b5b610fba85828601610eb3565b92509250509250929050565b600060208284031215610fdc57610fdb61188e565b5b600082013567ffffffffffffffff811115610ffa57610ff9611889565b5b61100684828501610f09565b91505092915050565b6000806000606084860312156110285761102761188e565b5b600084013567ffffffffffffffff81111561104657611045611889565b5b61105286828701610f09565b935050602061106386828701610f37565b925050604084013567ffffffffffffffff81111561108457611083611889565b5b61109086828701610f09565b9150509250925092565b6000806000606084860312156110b3576110b261188e565b5b600084013567ffffffffffffffff8111156110d1576110d0611889565b5b6110dd86828701610f09565b93505060206110ee86828701610f37565b92505060406110ff86828701610f37565b9150509250925092565b600061111583836111a1565b905092915050565b61112681611680565b82525050565b6000611137826115eb565b611141818561160e565b935083602082028501611153856115c6565b8060005b8581101561118f57848403895281516111708582611109565b945061117b83611601565b925060208a01995050600181019050611157565b50829750879550505050505092915050565b60006111ac826115f6565b6111b6818561161f565b93506111c68185602086016116cb565b6111cf81611893565b840191505092915050565b60006111e5826115f6565b6111ef8185611641565b93506111ff8185602086016116cb565b80840191505092915050565b60008154611218816116fe565b6112228186611641565b9450600182166000811461123d576001811461124e57611281565b60ff19831686528186019350611281565b611257856115d6565b60005b838110156112795781548189015260018201915060208101905061125a565b838801955050505b50505092915050565b6000611297602683611630565b91506112a2826118a4565b604082019050919050565b60006112ba600783611641565b91506112c5826118f3565b600782019050919050565b60006112dd602283611630565b91506112e88261191c565b604082019050919050565b6000611300602083611630565b915061130b8261196b565b602082019050919050565b6000611323600683611641565b915061132e82611994565b600682019050919050565b6000611346600483611641565b9150611351826119bd565b600482019050919050565b6000611369600383611641565b9150611374826119e6565b600382019050919050565b611388816116b2565b82525050565b600061139a82846111da565b915081905092915050565b60006113b1828461120b565b915081905092915050565b60006113c7826112ad565b9150819050919050565b60006113dc82611316565b9150819050919050565b60006113f182611339565b9150819050919050565b60006114068261135c565b9150819050919050565b6000602082019050611425600083018461111d565b92915050565b60006020820190508181036000830152611445818461112c565b905092915050565b600060208201905081810360008301526114668161128a565b9050919050565b60006020820190508181036000830152611486816112d0565b9050919050565b600060208201905081810360008301526114a6816112f3565b9050919050565b60006020820190506114c2600083018461137f565b92915050565b60006080820190506114dd600083018761137f565b6114ea602083018661137f565b6114f7604083018561137f565b611504606083018461137f565b95945050505050565b6000808335600160200384360303811261152a57611529611875565b5b80840192508235915067ffffffffffffffff82111561154c5761154b611870565b5b6020830192506001820236038313156115685761156761187f565b5b509250929050565b600061157a61158b565b90506115868282611730565b919050565b6000604051905090565b600067ffffffffffffffff8211156115b0576115af611837565b5b6115b982611893565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611657826116b2565b9150611662836116b2565b925082821015611675576116746117aa565b5b828203905092915050565b600061168b82611692565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156116e95780820151818401526020810190506116ce565b838111156116f8576000848401525b50505050565b6000600282049050600182168061171657607f821691505b6020821081141561172a576117296117d9565b5b50919050565b61173982611893565b810181811067ffffffffffffffff8211171561175857611757611837565b5b80604052505050565b600061176c826116b2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561179f5761179e6117aa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f417765736f6d6500000000000000000000000000000000000000000000000000600082015250565b7f796f757220616765206973206e6f7420656e6f75676820666f7220766f74696760008201527f6e2e000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f746261640000000000000000000000000000000000000000000000000000600082015250565b7f476f6f6400000000000000000000000000000000000000000000000000000000600082015250565b7f4261640000000000000000000000000000000000000000000000000000000000600082015250565b611a1881611680565b8114611a2357600080fd5b50565b611a2f816116b2565b8114611a3a57600080fd5b5056fea2646970667358221220cc60dc82b072509eb6d5d37654a64d5c54c6f993e57cea955837dd5e4e2780af64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Vote.sol:Vote",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 167,
        "contract": "contracts/Vote.sol:Vote",
        "label": "Options",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/Vote.sol:Vote",
        "label": "registrationList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Participants)159_storage)dyn_storage"
      },
      {
        "astId": 174,
        "contract": "contracts/Vote.sol:Vote",
        "label": "foodElectionList",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 178,
        "contract": "contracts/Vote.sol:Vote",
        "label": "nameToAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 184,
        "contract": "contracts/Vote.sol:Vote",
        "label": "foodIndexToFoodVote",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 188,
        "contract": "contracts/Vote.sol:Vote",
        "label": "addressToIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Participants)159_storage)dyn_storage": {
        "base": "t_struct(Participants)159_storage",
        "encoding": "dynamic_array",
        "label": "struct Vote.Participants[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Participants)159_storage": {
        "encoding": "inplace",
        "label": "struct Vote.Participants",
        "members": [
          {
            "astId": 152,
            "contract": "contracts/Vote.sol:Vote",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 154,
            "contract": "contracts/Vote.sol:Vote",
            "label": "age",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 156,
            "contract": "contracts/Vote.sol:Vote",
            "label": "election",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 158,
            "contract": "contracts/Vote.sol:Vote",
            "label": "vote",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}