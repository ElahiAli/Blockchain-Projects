{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "Vote__AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vote__AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vote__FoodNotExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vote__NoteRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_AGE_OF_VOTERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_foodName",
          "type": "string[]"
        }
      ],
      "name": "electionList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_foodName",
          "type": "string"
        }
      ],
      "name": "electionResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "Bad",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Notbad",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Good",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Awesome",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getElectionsList",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOptionsList",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_election",
          "type": "string"
        }
      ],
      "name": "registration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_foodIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusIndex",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2a659a7bdb62a7ff215c55074b67237f9d8833faa489c0c3cb4afcea7b26d3a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1780481",
    "logsBloom": "0x
    "blockHash": "0x29912112c6d89221c4fc0ddc50826f0f372ca9f28110ed7fc3e1a61cfef4b968",
    "transactionHash": "0xf2a659a7bdb62a7ff215c55074b67237f9d8833faa489c0c3cb4afcea7b26d3a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xf2a659a7bdb62a7ff215c55074b67237f9d8833faa489c0c3cb4afcea7b26d3a",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x29912112c6d89221c4fc0ddc50826f0f372ca9f28110ed7fc3e1a61cfef4b968"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1780481",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1a064b1e6174da1e6b21dd0b3c15a52a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Vote__AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vote__AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vote__FoodNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vote__NoteRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_AGE_OF_VOTERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_foodName\",\"type\":\"string[]\"}],\"name\":\"electionList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foodName\",\"type\":\"string\"}],\"name\":\"electionResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Bad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Notbad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Good\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Awesome\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElectionsList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptionsList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_election\",\"type\":\"string\"}],\"name\":\"registration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_foodIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusIndex\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vote.sol\":\"Vote\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Vote__NoteRegistered();\\nerror Vote__FoodNotExists();\\nerror Vote__AccessDenied();\\nerror Vote__AlreadyVoted();\\n\\ncontract Vote is Ownable {\\n\\tuint256 public constant MINIMUM_AGE_OF_VOTERS = 9;\\n\\n\\tstruct Participants {\\n\\t\\tstring name;\\n\\t\\tuint256 age;\\n\\t\\tstring election;\\n\\t\\tbool vote;\\n\\t}\\n\\n\\t//different options for vote\\n\\tstring[] internal Options = [\\\"Bad\\\", \\\"Notbad\\\", \\\"Good\\\", \\\"Awesome\\\"];\\n\\tParticipants[] internal registrationList;\\n\\tstring[] internal foodElectionList;\\n\\n\\tmapping(string => address) internal nameToAddress;\\n\\tmapping(string => mapping(string => uint256)) internal foodIndexToFoodVote;\\n\\tmapping(address => uint256) internal addressToIndex;\\n\\n\\tmodifier ageLimit(uint256 _age) {\\n\\t\\trequire(\\n\\t\\t\\t_age >= MINIMUM_AGE_OF_VOTERS,\\n\\t\\t\\t\\\"your age is not enough for votign.\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkFoodExistent(string memory _election) {\\n\\t\\tstring[] memory newfoodElectionList = getElectionsList();\\n\\t\\tbool found = false;\\n\\t\\tfor (uint256 index = 0; index < newfoodElectionList.length; index++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_election)) ==\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(newfoodElectionList[index]))\\n\\t\\t\\t) {\\n\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!found) {\\n\\t\\t\\trevert Vote__FoodNotExists();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t// registration of all Participants\\n\\tfunction registration(\\n\\t\\tstring memory _name,\\n\\t\\tuint256 _age,\\n\\t\\tstring memory _election\\n\\t) public ageLimit(_age) checkFoodExistent(_election) {\\n\\t\\tregistrationList.push(Participants(_name, _age, _election, false));\\n\\t\\tnameToAddress[_name] = msg.sender;\\n\\t\\taddressToIndex[msg.sender] = (registrationList.length) - 1;\\n\\t}\\n\\n\\t//Election list by Owner\\n\\tfunction electionList(string[] calldata _foodName) public onlyOwner {\\n\\t\\tfor (uint256 i = 0; i < _foodName.length; i++) {\\n\\t\\t\\tfoodElectionList.push(_foodName[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t//Vote counting && voting anonymously\\n\\tfunction vote(\\n\\t\\tstring memory _name,\\n\\t\\tuint256 _foodIndex,\\n\\t\\tuint256 _statusIndex\\n\\t) public {\\n\\t\\tif (\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tregistrationList[addressToIndex[msg.sender]].election\\n\\t\\t\\t\\t)\\n\\t\\t\\t) != keccak256(abi.encodePacked(foodElectionList[_foodIndex]))\\n\\t\\t) {\\n\\t\\t\\trevert Vote__AccessDenied();\\n\\t\\t}\\n\\t\\tif (registrationList[addressToIndex[msg.sender]].vote == true) {\\n\\t\\t\\trevert Vote__AlreadyVoted();\\n\\t\\t} else {\\n\\t\\t\\tregistrationList[addressToIndex[msg.sender]].vote = true;\\n\\t\\t}\\n\\n\\t\\tstring[] memory electionsList = getElectionsList();\\n\\t\\tstring[] memory options = getOptionsList();\\n\\t\\tif (nameToAddress[_name] != msg.sender) {\\n\\t\\t\\trevert Vote__NoteRegistered();\\n\\t\\t}\\n\\t\\tfoodIndexToFoodVote[electionsList[_foodIndex]][options[_statusIndex]]++;\\n\\t}\\n\\n\\t//Results publishing\\n\\tfunction electionResult(\\n\\t\\tstring memory _foodName\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256 Bad, uint256 Notbad, uint256 Good, uint256 Awesome)\\n\\t{\\n\\t\\tuint256 badVots = foodIndexToFoodVote[_foodName][\\\"Bad\\\"];\\n\\t\\tuint256 notbadVots = foodIndexToFoodVote[_foodName][\\\"Notbad\\\"];\\n\\t\\tuint256 GoodVots = foodIndexToFoodVote[_foodName][\\\"Good\\\"];\\n\\t\\tuint256 awesomeVots = foodIndexToFoodVote[_foodName][\\\"Awesome\\\"];\\n\\t\\treturn (badVots, notbadVots, GoodVots, awesomeVots);\\n\\t}\\n\\n\\t// showing different elections\\n\\tfunction getElectionsList() public view returns (string[] memory) {\\n\\t\\treturn foodElectionList;\\n\\t}\\n\\n\\t// showing different options\\n\\tfunction getOptionsList() public view returns (string[] memory) {\\n\\t\\treturn Options;\\n\\t}\\n\\n\\t//getting participantes\\n\\tfunction getParticipants() internal view returns (Participants[] memory) {\\n\\t\\treturn registrationList;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1b73f369143ee044c1a96f3c4e4b84da394efb8ddd137d4278cbf7a7df445264\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637650275f116100665780637650275f14610136578063845371fc146101525780638da5cb5b14610170578063cc6323f11461018e578063f2fde38b146101ac5761009e565b80630891d358146100a35780633586ffe3146100bf57806352720c4b146100dd57806370779b7b14610110578063715018a61461012c575b600080fd5b6100bd60048036038101906100b89190610eb2565b6101c8565b005b6100c761053f565b6040516100d49190610f30565b60405180910390f35b6100f760048036038101906100f29190610f4b565b610544565b6040516101079493929190610f94565b60405180910390f35b61012a60048036038101906101259190611039565b610655565b005b6101346106e4565b005b610150600480360381019061014b9190611086565b6106f8565b005b61015a61097a565b6040516101679190611252565b60405180910390f35b610178610a53565b60405161018591906112b5565b60405180910390f35b610196610a7c565b6040516101a39190611252565b60405180910390f35b6101c660048036038101906101c191906112fc565b610b55565b005b600382815481106101dc576101db611329565b5b906000526020600020016040516020016101f6919061145b565b604051602081830303815290604052805190602001206002600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061025f5761025e611329565b5b9060005260206000209060040201600201604051602001610280919061145b565b60405160208183030381529060405280519060200120146102cd576040517f212eb0d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600115156002600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061032457610323611329565b5b906000526020600020906004020160030160009054906101000a900460ff1615150361037c576040517ff8e535ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106103d1576103d0611329565b5b906000526020600020906004020160030160006101000a81548160ff021916908315150217905550600061040361097a565b9050600061040f610a7c565b90503373ffffffffffffffffffffffffffffffffffffffff1660048660405161043891906114a3565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104b4576040517f0c97a77200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60058285815181106104c9576104c8611329565b5b60200260200101516040516104de91906114a3565b90815260200160405180910390208184815181106104ff576104fe611329565b5b602002602001015160405161051491906114a3565b90815260200160405180910390206000815480929190610533906114e9565b91905055505050505050565b600981565b600080600080600060058660405161055c91906114a3565b90815260200160405180910390206040516105769061157d565b9081526020016040518091039020549050600060058760405161059991906114a3565b90815260200160405180910390206040516105b3906115de565b908152602001604051809103902054905060006005886040516105d691906114a3565b90815260200160405180910390206040516105f09061163f565b9081526020016040518091039020549050600060058960405161061391906114a3565b908152602001604051809103902060405161062d906116a0565b9081526020016040518091039020549050838383839750975097509750505050509193509193565b61065d610bd8565b60005b828290508110156106df5760038383838181106106805761067f611329565b5b905060200281019061069291906116c4565b909180600181540180825580915050600190039060005260206000200160009091929091929091929091925091826106cb9291906118c9565b5080806106d7906114e9565b915050610660565b505050565b6106ec610bd8565b6106f66000610c56565b565b81600981101561073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490611a1c565b60405180910390fd5b81600061074861097a565b90506000805b82518110156107e05782818151811061076a57610769611329565b5b602002602001015160405160200161078291906114a3565b60405160208183030381529060405280519060200120846040516020016107a991906114a3565b60405160208183030381529060405280519060200120036107cd57600191506107e0565b80806107d8906114e9565b91505061074e565b5080610818576040517f0b7c834100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026040518060800160405280898152602001888152602001878152602001600015158152509080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908161087c9190611a3c565b5060208201518160010155604082015181600201908161089c9190611a3c565b5060608201518160030160006101000a81548160ff0219169083151502179055505050336004886040516108d091906114a3565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160028054905061092e9190611b0e565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050505050565b60606003805480602002602001604051908101604052809291908181526020016000905b82821015610a4a5783829060005260206000200180546109bd90611387565b80601f01602080910402602001604051908101604052809291908181526020018280546109e990611387565b8015610a365780601f10610a0b57610100808354040283529160200191610a36565b820191906000526020600020905b815481529060010190602001808311610a1957829003601f168201915b50505050508152602001906001019061099e565b50505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610b4c578382906000526020600020018054610abf90611387565b80601f0160208091040260200160405190810160405280929190818152602001828054610aeb90611387565b8015610b385780601f10610b0d57610100808354040283529160200191610b38565b820191906000526020600020905b815481529060010190602001808311610b1b57829003601f168201915b505050505081526020019060010190610aa0565b50505050905090565b610b5d610bd8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc390611bb4565b60405180910390fd5b610bd581610c56565b50565b610be0610d1a565b73ffffffffffffffffffffffffffffffffffffffff16610bfe610a53565b73ffffffffffffffffffffffffffffffffffffffff1614610c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4b90611c20565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d8982610d40565b810181811067ffffffffffffffff82111715610da857610da7610d51565b5b80604052505050565b6000610dbb610d22565b9050610dc78282610d80565b919050565b600067ffffffffffffffff821115610de757610de6610d51565b5b610df082610d40565b9050602081019050919050565b82818337600083830152505050565b6000610e1f610e1a84610dcc565b610db1565b905082815260208101848484011115610e3b57610e3a610d3b565b5b610e46848285610dfd565b509392505050565b600082601f830112610e6357610e62610d36565b5b8135610e73848260208601610e0c565b91505092915050565b6000819050919050565b610e8f81610e7c565b8114610e9a57600080fd5b50565b600081359050610eac81610e86565b92915050565b600080600060608486031215610ecb57610eca610d2c565b5b600084013567ffffffffffffffff811115610ee957610ee8610d31565b5b610ef586828701610e4e565b9350506020610f0686828701610e9d565b9250506040610f1786828701610e9d565b9150509250925092565b610f2a81610e7c565b82525050565b6000602082019050610f456000830184610f21565b92915050565b600060208284031215610f6157610f60610d2c565b5b600082013567ffffffffffffffff811115610f7f57610f7e610d31565b5b610f8b84828501610e4e565b91505092915050565b6000608082019050610fa96000830187610f21565b610fb66020830186610f21565b610fc36040830185610f21565b610fd06060830184610f21565b95945050505050565b600080fd5b600080fd5b60008083601f840112610ff957610ff8610d36565b5b8235905067ffffffffffffffff81111561101657611015610fd9565b5b60208301915083602082028301111561103257611031610fde565b5b9250929050565b600080602083850312156110505761104f610d2c565b5b600083013567ffffffffffffffff81111561106e5761106d610d31565b5b61107a85828601610fe3565b92509250509250929050565b60008060006060848603121561109f5761109e610d2c565b5b600084013567ffffffffffffffff8111156110bd576110bc610d31565b5b6110c986828701610e4e565b93505060206110da86828701610e9d565b925050604084013567ffffffffffffffff8111156110fb576110fa610d31565b5b61110786828701610e4e565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561117757808201518184015260208101905061115c565b60008484015250505050565b600061118e8261113d565b6111988185611148565b93506111a8818560208601611159565b6111b181610d40565b840191505092915050565b60006111c88383611183565b905092915050565b6000602082019050919050565b60006111e882611111565b6111f2818561111c565b9350836020820285016112048561112d565b8060005b85811015611240578484038952815161122185826111bc565b945061122c836111d0565b925060208a01995050600181019050611208565b50829750879550505050505092915050565b6000602082019050818103600083015261126c81846111dd565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061129f82611274565b9050919050565b6112af81611294565b82525050565b60006020820190506112ca60008301846112a6565b92915050565b6112d981611294565b81146112e457600080fd5b50565b6000813590506112f6816112d0565b92915050565b60006020828403121561131257611311610d2c565b5b6000611320848285016112e7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061139f57607f821691505b6020821081036113b2576113b1611358565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b600081546113e581611387565b6113ef81866113b8565b9450600182166000811461140a576001811461141f57611452565b60ff1983168652811515820286019350611452565b611428856113c3565b60005b8381101561144a5781548189015260018201915060208101905061142b565b838801955050505b50505092915050565b600061146782846113d8565b915081905092915050565b600061147d8261113d565b61148781856113b8565b9350611497818560208601611159565b80840191505092915050565b60006114af8284611472565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114f482610e7c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611526576115256114ba565b5b600182019050919050565b7f4261640000000000000000000000000000000000000000000000000000000000600082015250565b60006115676003836113b8565b915061157282611531565b600382019050919050565b60006115888261155a565b9150819050919050565b7f4e6f746261640000000000000000000000000000000000000000000000000000600082015250565b60006115c86006836113b8565b91506115d382611592565b600682019050919050565b60006115e9826115bb565b9150819050919050565b7f476f6f6400000000000000000000000000000000000000000000000000000000600082015250565b60006116296004836113b8565b9150611634826115f3565b600482019050919050565b600061164a8261161c565b9150819050919050565b7f417765736f6d6500000000000000000000000000000000000000000000000000600082015250565b600061168a6007836113b8565b915061169582611654565b600782019050919050565b60006116ab8261167d565b9150819050919050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126116e1576116e06116b5565b5b80840192508235915067ffffffffffffffff821115611703576117026116ba565b5b60208301925060018202360383131561171f5761171e6116bf565b5b509250929050565b600082905092915050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261177f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611742565b6117898683611742565b95508019841693508086168417925050509392505050565b6000819050919050565b60006117c66117c16117bc84610e7c565b6117a1565b610e7c565b9050919050565b6000819050919050565b6117e0836117ab565b6117f46117ec826117cd565b84845461174f565b825550505050565b600090565b6118096117fc565b6118148184846117d7565b505050565b5b818110156118385761182d600082611801565b60018101905061181a565b5050565b601f82111561187d5761184e816113c3565b61185784611732565b81016020851015611866578190505b61187a61187285611732565b830182611819565b50505b505050565b600082821c905092915050565b60006118a060001984600802611882565b1980831691505092915050565b60006118b9838361188f565b9150826002028217905092915050565b6118d38383611727565b67ffffffffffffffff8111156118ec576118eb610d51565b5b6118f68254611387565b61190182828561183c565b6000601f831160018114611930576000841561191e578287013590505b61192885826118ad565b865550611990565b601f19841661193e866113c3565b60005b8281101561196657848901358255600182019150602085019450602081019050611941565b86831015611983578489013561197f601f89168261188f565b8355505b6001600288020188555050505b50505050505050565b600082825260208201905092915050565b7f796f757220616765206973206e6f7420656e6f75676820666f7220766f74696760008201527f6e2e000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a06602283611999565b9150611a11826119aa565b604082019050919050565b60006020820190508181036000830152611a35816119f9565b9050919050565b611a458261113d565b67ffffffffffffffff811115611a5e57611a5d610d51565b5b611a688254611387565b611a7382828561183c565b600060209050601f831160018114611aa65760008415611a94578287015190505b611a9e85826118ad565b865550611b06565b601f198416611ab4866113c3565b60005b82811015611adc57848901518255600182019150602085019450602081019050611ab7565b86831015611af95784890151611af5601f89168261188f565b8355505b6001600288020188555050505b505050505050565b6000611b1982610e7c565b9150611b2483610e7c565b9250828203905081811115611b3c57611b3b6114ba565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611b9e602683611999565b9150611ba982611b42565b604082019050919050565b60006020820190508181036000830152611bcd81611b91565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611c0a602083611999565b9150611c1582611bd4565b602082019050919050565b60006020820190508181036000830152611c3981611bfd565b905091905056fea26469706673582212202da5127ad85b21c319b770ba8384eaae6e5d255b9e5b47c959f92cf621288c7d64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Vote.sol:Vote",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 167,
        "contract": "contracts/Vote.sol:Vote",
        "label": "Options",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/Vote.sol:Vote",
        "label": "registrationList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Participants)159_storage)dyn_storage"
      },
      {
        "astId": 174,
        "contract": "contracts/Vote.sol:Vote",
        "label": "foodElectionList",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 178,
        "contract": "contracts/Vote.sol:Vote",
        "label": "nameToAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 184,
        "contract": "contracts/Vote.sol:Vote",
        "label": "foodIndexToFoodVote",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 188,
        "contract": "contracts/Vote.sol:Vote",
        "label": "addressToIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Participants)159_storage)dyn_storage": {
        "base": "t_struct(Participants)159_storage",
        "encoding": "dynamic_array",
        "label": "struct Vote.Participants[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Participants)159_storage": {
        "encoding": "inplace",
        "label": "struct Vote.Participants",
        "members": [
          {
            "astId": 152,
            "contract": "contracts/Vote.sol:Vote",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 154,
            "contract": "contracts/Vote.sol:Vote",
            "label": "age",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 156,
            "contract": "contracts/Vote.sol:Vote",
            "label": "election",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 158,
            "contract": "contracts/Vote.sol:Vote",
            "label": "vote",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}