every block:
block,nonce,data,previoushash = hash
it also has the previous block hash

EVM can access and store information in six places:
1.stack
2.Memory : only during the transaction call.
3.Storage : exist as global variable.perment variabel and can be modify.
4.Calldata : temporary type that can't be modify.
5.Code
6.Logs

array,struct,map is the special type in solidity.
string is an array.

inheritance:
we can inheritance with importing the right contract and using the "is" like firstcontract is secondcontract that's it.
override:
for overriding a function we need to add the word "virtual" to the function.
revert:
if our require condition is not currect then it would return any gas or done job or.....

blockchain it self can't call API but chainlink can.     
for intracting with contracts we need two things:
1.ABI
2.Address
when we use interface the interface itself give the ABI.
decimal not working in solidity.

safe math:
checked and unchecked is use for the size of variable and this problem is solved in solidity 0.8.0.
unchecked keyword use less gasprice.

withdraw money with 3 way:
1.transfer: size of gas is so important, if the gasprice pass 2300 it return error. auto revert. 
2.send: use 2300 gasprice it would return boolean if fail and it's not auto revert.
3.call: return two variable, second one is not important for now. second variable type "bytes memory dataReturned".

constructor: is function that imediatly excut after deploying the contract.

Advance solidity:
constant: this keyword is for variable that would not change during the program.
and also it use less gas.

immutable: save gas and is use for variable that set only one time.
variable only once can be set.

custom error: using "if" instead of "require" and need to call it.

revert: we can revert middel of the function or somewhere else it's just like require
revert is some kind of error-handler keyword.

recieve(): is special function that would trigger when we send a transaction to a function with
empty call data.(0Eth or less & more).

fallback(): is special function that would trigger when we send a transaction to a function with
data in call data.(0Eth or less & more).

both of fallback and recieve are just like constructor, all of them are special function.

learn some markdown!!!

if we use "async" befor function then we can use await keyword 
await: wait for any promise function to be fulfilled or rejected.

command for compile : `yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . SimpleStorage.sol`
create scripts in package.json for simpling the command.

in the js require works as import.

for deploy we need: ABI and Bynary.
js : `` backtic like fstring.

for readign from .env we need to add dotenv tool.

writting encripted file: 7:41

quicknode - moralis.io - infura - alchemy
yarn = npm
yarn = npx

Hardhat Setting:
1.`yarn init -> new project`
2.`yarn add --dev hardhat`
3.`yarn hardhat`
4.`yarn hardhat` -> options
Done.

commands:
there is problem with accounts, we need to add script to hardhat.config.js to solve it.

Networks:
need to add the new network RPC_url to hardhat.config.js file.
yarn hardhat node: start local node network just like ganache.

Verfication:
`yarn add --dev @nomiclabs/hardhat-etherscan`

Tasks: 
we can write scripts in hardhat.config or in seperate file named tasks.

Hardhat Console:
`yarn hardhat console --network hardhat` or localhost or anyother network.

deleting the cache and artifacts:
`yarn hardhat clean`

Tests:
inside every function we have a beforeEach() and bunch of it().
commands:
`yarn hardhat test`
`yarn hardhat test --grep store`(key in the string). or use .only in code. it.only

Gas reporting:
`yarn add hardhat-gas-reporter --dev`
`yarn hardhat test`

Test coverage:
this is a package for protactting our code.
`yarn add --dev solidity-coverage `
`yarn hardhat coverage`

Hardhat Waffle:
some kind of test. 

Solhint:
`yarn solhint contract/*.sol` ->it's gonna lint our solidity code. finding error in the code and orgnizing it.
`yarn add solhint`
`yarn solhint --init` ->json file
add following to file -> {{
"extends": "solhint:recommended",
    "plugins": [],
    "rules": {
      "avoid-suicide": "error",
      "avoid-sha3": "warn"
    }
}
`yarn solhint contracts/*.sol`

Install chainlink:
`yarn add --dev @chainlink/contracts`
config.js -> require("hardhat-deploy")

for makeing deploying easier:
`yarn add --dev hardhat-deploy`

hre = hardhat runtime environment

Running only Mock:
`yarn hardhat deploy --tags mocks`

hardhat -> network:
`yarn hardhat deploy --network goerli`

solidity style Guide:
Error: error contractname__errorname;

Create auto Docs:  -> solc --userdoc --devdoc ex1.sol
/**@title fslkakj 
  *@auther lkjfsdj
  *@notice lkfsj
*/

unit tests are done locally
-hardhat 
-local hardhat
staging test can be done on a testnet (LAST STOP!!!)

Advance:(gas optimization):
all the state variable would store in Storage, the storage is somekind of array.
dynamic variabe in the storage like a array or list or etc use somekind of hash to store the objects.
constant and immutable are not stored in storage.

LOTTERY:
1. yarn add --dev hardhat
2. yarn hardhat
3. yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers @nomiclabs/hardhat-etherscan @nomiclabs/hardhat-waffle chai ethereum-waffle hardhat hardhat-contract-sizer hardhat-deploy hardhat-gas-reporter prettier prettier-plugin-solidity solhint solidity-coverage dotenv
4. add the packages to hardhat.config.js -> require("")
5. add .prettierrc file
6. add contract folder and Lottery.sol file
7. when importing vrf -> yarn add --dev @chainlink/contracts
8. after add VRFComsumerBaseV2 to the constructor -> yarn hardhat compile
9. after complete the contract create deploy folder and in the folder add 01-deploy-raffle.js file
10. add .env and in hardhat.config add network settings
11. add helper-hardhat-config.js file 
12. add 00-deploy-mocks.js file
13. for creating mocks -> add folder named test to contracts and file in it named VRFCoordinatorV2Mock.sol
14. for verify we add a folder utils and file in it named verify.js
15. affter complete the deploy scripts -> yarn hardhat deploy
16. create a folder named test and a folder in it named unit and a file in it named raffle.test.js


tip:
require use gas way more than if.
event: Emit an event when we update a dynamic array or mapping.

Login and Events:
log is somekind of structure
events allow you to "print" stuff to this log
this events and logs live in special data structure that isn't accessible to smart contract that's why it's cheaper.
eachone of this Events are tied to one contract or address.
chainlink listening to request data events
IN THE CODE:
two type of parameters: Index and nonIndex
when we emit the event it's gonna store the passing variabe to the storage.

Introduction to chainlink VRF:(version2):

tip:
we want our Raffle to cnsume the vrf inharit from the vrf.
after inharitance function fulfillRandomWords can get variabe.  
most of the thing are from VRF chainlink docs.

Hardhat shorthand:
`yarn global add hardhat-shorthand `-> hh command

Chainlink Keepers:
there is two method:
1. checkUpkeep: this is run off chain by a node from the channeling keeper network __ in our case it's gonna check
that it's time to get random number or not.
2. performUpkeep: verifing the thing on chain to be correct,then actually make the state change. 

