const ethers = require("ethers")
const fs = require("fs")
require("dotenv").config()

async function main() {
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider)
    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf8"
    )
    const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
    console.log("Deploying, please wait...")
    const contract = await contractFactory.deploy()
    await contract.deployTransaction.wait(1)

    // console.log("Let's deploy with only transaction data!");
    // nonce = wallet.getTransactionCount();
    // const tx = {
    //   nonce: nonce,
    //   gasPrice: 20000000000,
    //   gasLimit: 1000000,
    //   to: null,
    //   value: 0,
    //   data: "0x608060405234801561001057600080fd5b50610abb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec1146100675780636057361d146100855780636f760f41146100a15780638bab8dd5146100bd5780639e7a13ad146100ed578063e2c93c291461011e575b600080fd5b61006f61013a565b60405161007c9190610714565b60405180910390f35b61009f600480360381019061009a9190610657565b610143565b005b6100bb60048036038101906100b691906105fb565b61014d565b005b6100d760048036038101906100d291906105b2565b6101dd565b6040516100e49190610714565b60405180910390f35b61010760048036038101906101029190610657565b61020b565b60405161011592919061072f565b60405180910390f35b61013860048036038101906101339190610657565b6102c7565b005b60008054905090565b8060008190555050565b600260405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101b39291906103bd565b505050806001836040516101c791906106fd565b9081526020016040518091039020819055505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6002818154811061021b57600080fd5b9060005260206000209060020201600091509050806000015490806001018054610244906108b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610270906108b2565b80156102bd5780601f10610292576101008083540402835291602001916102bd565b820191906000526020600020905b8154815290600101906020018083116102a057829003601f168201915b5050505050905082565b60008190505b60016002805490506102df9190610832565b8110156103765760026001826102f591906107dc565b81548110610306576103056109eb565b5b906000526020600020906002020160028281548110610328576103276109eb565b5b9060005260206000209060020201600082015481600001556001820181600101908054610354906108b2565b61035f929190610443565b50905050808061036e90610915565b9150506102cd565b506002805480610389576103886109bc565b5b60019003818190600052602060002090600202016000808201600090556001820160006103b691906104d0565b5050905550565b8280546103c9906108b2565b90600052602060002090601f0160209004810192826103eb5760008555610432565b82601f1061040457805160ff1916838001178555610432565b82800160010185558215610432579182015b82811115610431578251825591602001919060010190610416565b5b50905061043f9190610510565b5090565b82805461044f906108b2565b90600052602060002090601f01602090048101928261047157600085556104bf565b82601f1061048257805485556104bf565b828001600101855582156104bf57600052602060002091601f016020900482015b828111156104be5782548255916001019190600101906104a3565b5b5090506104cc9190610510565b5090565b5080546104dc906108b2565b6000825580601f106104ee575061050d565b601f01602090049060005260206000209081019061050c9190610510565b5b50565b5b80821115610529576000816000905550600101610511565b5090565b600061054061053b84610784565b61075f565b90508281526020810184848401111561055c5761055b610a4e565b5b610567848285610870565b509392505050565b600082601f83011261058457610583610a49565b5b813561059484826020860161052d565b91505092915050565b6000813590506105ac81610a6e565b92915050565b6000602082840312156105c8576105c7610a58565b5b600082013567ffffffffffffffff8111156105e6576105e5610a53565b5b6105f28482850161056f565b91505092915050565b6000806040838503121561061257610611610a58565b5b600083013567ffffffffffffffff8111156106305761062f610a53565b5b61063c8582860161056f565b925050602061064d8582860161059d565b9150509250929050565b60006020828403121561066d5761066c610a58565b5b600061067b8482850161059d565b91505092915050565b600061068f826107b5565b61069981856107c0565b93506106a981856020860161087f565b6106b281610a5d565b840191505092915050565b60006106c8826107b5565b6106d281856107d1565b93506106e281856020860161087f565b80840191505092915050565b6106f781610866565b82525050565b600061070982846106bd565b915081905092915050565b600060208201905061072960008301846106ee565b92915050565b600060408201905061074460008301856106ee565b81810360208301526107568184610684565b90509392505050565b600061076961077a565b905061077582826108e4565b919050565b6000604051905090565b600067ffffffffffffffff82111561079f5761079e610a1a565b5b6107a882610a5d565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006107e782610866565b91506107f283610866565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108275761082661095e565b5b828201905092915050565b600061083d82610866565b915061084883610866565b92508282101561085b5761085a61095e565b5b828203905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561089d578082015181840152602081019050610882565b838111156108ac576000848401525b50505050565b600060028204905060018216806108ca57607f821691505b602082108114156108de576108dd61098d565b5b50919050565b6108ed82610a5d565b810181811067ffffffffffffffff8211171561090c5761090b610a1a565b5b80604052505050565b600061092082610866565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109535761095261095e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610a7781610866565b8114610a8257600080fd5b5056fea2646970667358221220dfa5ba4704878dd534a11e157f230739e6cbaafe31a00cf8490d73d25bebebb064736f6c63430008070033",
    //   chainId: 1337,
    // };
    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log(sentTxResponse);

    //interact
    const currentFavoriteNumber = await contract.retrieve()
    console.log(`current favorite number: ${currentFavoriteNumber.toString()}`)
    const txResponse = await contract.store("15")
    const txResponseReceipt = await txResponse.wait(1)
    const updateFavoriteNumber = await contract.retrieve()
    console.log(`Updated favorite number: ${updateFavoriteNumber.toString()}`)
    const addPerson = await contract.addPerson("ali", "40")
    const addPersonReceipt = await addPerson.wait(1)
    const nameToFavoriteNumber = await contract.nameToFavoriteNumber("ali")
    // const nameToFavoriteNumberReceipt = nameToFavoriteNumber.wait(1)
    console.log(`ali's favorite number is: ${nameToFavoriteNumber.toString()}`)
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    })
