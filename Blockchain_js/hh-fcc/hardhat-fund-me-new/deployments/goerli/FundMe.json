{
  "address": "0xfa8f85A9a93210f633D0cb83453db5ac7a263113",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x654076a0c1ffb07614537675a631b03428d7e7f34f4cf95e7dc72a471ac2f608",
  "receipt": {
    "to": null,
    "from": "0xA4CC27F3DdA8cdaA9bE781342ddEBF9a000313af",
    "contractAddress": "0xfa8f85A9a93210f633D0cb83453db5ac7a263113",
    "transactionIndex": 71,
    "gasUsed": "1034062",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xceea6eb050393120409a09629667ec7ef9ea653604ba897fe255e20928ceabdc",
    "transactionHash": "0x654076a0c1ffb07614537675a631b03428d7e7f34f4cf95e7dc72a471ac2f608",
    "logs": [],
    "blockNumber": 8652301,
    "cumulativeGasUsed": "13037152",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "e3f8ba706d37a4dce3332184d1d7c365",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    //using library for specific type\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    //list of address.\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    address private immutable i_owner;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not the owner!\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    //if someone accedently send money or call the wrong function receive will call the fund function.\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        //want to set a minimum amount to usd!\\n        //getConversionRate(msg.value) it change after using our own library.\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD,\\n            \\\"Didn't send enouph!\\\"\\n        );\\n        //taking the eth sender account's address.\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        /*starting index, ending index, step amount*/\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        //reset an Array, (0) is the count of object inside the array\\n        s_funders = new address[](0);\\n\\n        //actualy withdraw the funds\\n\\n        //1.transfer\\n        // msg.sender = address\\n        // payable(msg.sender) = payable address\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        //2.send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess,\\\"send failed!\\\");\\n\\n        //3.call /best way for now.\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"call failed!\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x8ba8efe6df148996bc211f5938fa65b6b3df82c00dfe519dd733ab8fcadb3560\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        //ABI\\n        //Address \\t0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // dont need this line because we pass it as parameter\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        //ETH in terms of USD\\n        //3000.00000000\\n        return uint256(answer * 1e10); // 1**10 = 10000000000\\n    }\\n\\n    function getVersion() internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xa12510df3666b7fa87ab398ede24a87f7929fa2ba8ee3dbdf9693f325bcc6884\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012dd380380620012dd833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611157620001866000396000818161038d015281816105dc0152818161062c015261082201526111576000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101b757610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610ae5565b61031c565b6040516100d79190610b2b565b60405180910390f35b3480156100ec57600080fd5b506100f5610365565b6040516101029190610ba5565b60405180910390f35b34801561011757600080fd5b5061012061038b565b005b34801561012e57600080fd5b506101376105cb565b6040516101449190610b2b565b60405180910390f35b34801561015957600080fd5b506101626105d8565b60405161016f9190610bcf565b60405180910390f35b34801561018457600080fd5b5061018d610600565b60405161019a9190610ba5565b60405180910390f35b6101ab6101f4565b005b6101b561062a565b005b3480156101c357600080fd5b506101de60048036038101906101d99190610c16565b6108b8565b6040516101eb9190610bcf565b60405180910390f35b6802b5e3af16b1880000610233600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ff90919063ffffffff16565b11610273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026a90610ca0565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610410576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104bb57600080828154811061043557610434610cc0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b390610d1e565b915050610413565b50600067ffffffffffffffff8111156104d7576104d6610d67565b5b6040519080825280602002602001820160405280156105055781602001602082028036833780820191505090505b506000908051906020019061051b9291906109db565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054290610dc7565b60006040518083038185875af1925050503d806000811461057f576040519150601f19603f3d011682016040523d82523d6000602084013e610584565b606091505b50509050806105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90610e28565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106af576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561073257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e8575b5050505050905060005b81518110156107bd57600082828151811061075a57610759610cc0565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b590610d1e565b91505061073c565b50600067ffffffffffffffff8111156107d9576107d8610d67565b5b6040519080825280602002602001820160405280156108075781602001602082028036833780820191505090505b506000908051906020019061081d9291906109db565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086490610dc7565b60006040518083038185875af1925050503d80600081146108a1576040519150601f19603f3d011682016040523d82523d6000602084013e6108a6565b606091505b50509050806108b457600080fd5b5050565b60008082815481106108cd576108cc610cc0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090b8361093b565b90506000670de0b6b3a764000085836109249190610e48565b61092e9190610ed1565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561098457600080fd5b505afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc9190610f8f565b5050509150506402540be400816109d3919061100a565b915050919050565b828054828255906000526020600020908101928215610a54579160200282015b82811115610a535782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109fb565b5b509050610a619190610a65565b5090565b5b80821115610a7e576000816000905550600101610a66565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ab282610a87565b9050919050565b610ac281610aa7565b8114610acd57600080fd5b50565b600081359050610adf81610ab9565b92915050565b600060208284031215610afb57610afa610a82565b5b6000610b0984828501610ad0565b91505092915050565b6000819050919050565b610b2581610b12565b82525050565b6000602082019050610b406000830184610b1c565b92915050565b6000819050919050565b6000610b6b610b66610b6184610a87565b610b46565b610a87565b9050919050565b6000610b7d82610b50565b9050919050565b6000610b8f82610b72565b9050919050565b610b9f81610b84565b82525050565b6000602082019050610bba6000830184610b96565b92915050565b610bc981610aa7565b82525050565b6000602082019050610be46000830184610bc0565b92915050565b610bf381610b12565b8114610bfe57600080fd5b50565b600081359050610c1081610bea565b92915050565b600060208284031215610c2c57610c2b610a82565b5b6000610c3a84828501610c01565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7570682100000000000000000000000000600082015250565b6000610c8a601383610c43565b9150610c9582610c54565b602082019050919050565b60006020820190508181036000830152610cb981610c7d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d2982610b12565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d5c57610d5b610cef565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610db1600083610d96565b9150610dbc82610da1565b600082019050919050565b6000610dd282610da4565b9150819050919050565b7f63616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610e12600c83610c43565b9150610e1d82610ddc565b602082019050919050565b60006020820190508181036000830152610e4181610e05565b9050919050565b6000610e5382610b12565b9150610e5e83610b12565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9757610e96610cef565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610edc82610b12565b9150610ee783610b12565b925082610ef757610ef6610ea2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f2181610f02565b8114610f2c57600080fd5b50565b600081519050610f3e81610f18565b92915050565b6000819050919050565b610f5781610f44565b8114610f6257600080fd5b50565b600081519050610f7481610f4e565b92915050565b600081519050610f8981610bea565b92915050565b600080600080600060a08688031215610fab57610faa610a82565b5b6000610fb988828901610f2f565b9550506020610fca88828901610f65565b9450506040610fdb88828901610f7a565b9350506060610fec88828901610f7a565b9250506080610ffd88828901610f2f565b9150509295509295909350565b600061101582610f44565b915061102083610f44565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561105f5761105e610cef565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561109c5761109b610cef565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110d9576110d8610cef565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561111657611115610cef565b5b82820290509291505056fea26469706673582212209d8f196004e4d2ed1d12fd7a677be0a6ad1d62a1599b589d45a80616e37a10d164736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101b757610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610ae5565b61031c565b6040516100d79190610b2b565b60405180910390f35b3480156100ec57600080fd5b506100f5610365565b6040516101029190610ba5565b60405180910390f35b34801561011757600080fd5b5061012061038b565b005b34801561012e57600080fd5b506101376105cb565b6040516101449190610b2b565b60405180910390f35b34801561015957600080fd5b506101626105d8565b60405161016f9190610bcf565b60405180910390f35b34801561018457600080fd5b5061018d610600565b60405161019a9190610ba5565b60405180910390f35b6101ab6101f4565b005b6101b561062a565b005b3480156101c357600080fd5b506101de60048036038101906101d99190610c16565b6108b8565b6040516101eb9190610bcf565b60405180910390f35b6802b5e3af16b1880000610233600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ff90919063ffffffff16565b11610273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026a90610ca0565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610410576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104bb57600080828154811061043557610434610cc0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b390610d1e565b915050610413565b50600067ffffffffffffffff8111156104d7576104d6610d67565b5b6040519080825280602002602001820160405280156105055781602001602082028036833780820191505090505b506000908051906020019061051b9291906109db565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054290610dc7565b60006040518083038185875af1925050503d806000811461057f576040519150601f19603f3d011682016040523d82523d6000602084013e610584565b606091505b50509050806105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90610e28565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106af576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561073257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e8575b5050505050905060005b81518110156107bd57600082828151811061075a57610759610cc0565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b590610d1e565b91505061073c565b50600067ffffffffffffffff8111156107d9576107d8610d67565b5b6040519080825280602002602001820160405280156108075781602001602082028036833780820191505090505b506000908051906020019061081d9291906109db565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086490610dc7565b60006040518083038185875af1925050503d80600081146108a1576040519150601f19603f3d011682016040523d82523d6000602084013e6108a6565b606091505b50509050806108b457600080fd5b5050565b60008082815481106108cd576108cc610cc0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090b8361093b565b90506000670de0b6b3a764000085836109249190610e48565b61092e9190610ed1565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561098457600080fd5b505afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc9190610f8f565b5050509150506402540be400816109d3919061100a565b915050919050565b828054828255906000526020600020908101928215610a54579160200282015b82811115610a535782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109fb565b5b509050610a619190610a65565b5090565b5b80821115610a7e576000816000905550600101610a66565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ab282610a87565b9050919050565b610ac281610aa7565b8114610acd57600080fd5b50565b600081359050610adf81610ab9565b92915050565b600060208284031215610afb57610afa610a82565b5b6000610b0984828501610ad0565b91505092915050565b6000819050919050565b610b2581610b12565b82525050565b6000602082019050610b406000830184610b1c565b92915050565b6000819050919050565b6000610b6b610b66610b6184610a87565b610b46565b610a87565b9050919050565b6000610b7d82610b50565b9050919050565b6000610b8f82610b72565b9050919050565b610b9f81610b84565b82525050565b6000602082019050610bba6000830184610b96565b92915050565b610bc981610aa7565b82525050565b6000602082019050610be46000830184610bc0565b92915050565b610bf381610b12565b8114610bfe57600080fd5b50565b600081359050610c1081610bea565b92915050565b600060208284031215610c2c57610c2b610a82565b5b6000610c3a84828501610c01565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7570682100000000000000000000000000600082015250565b6000610c8a601383610c43565b9150610c9582610c54565b602082019050919050565b60006020820190508181036000830152610cb981610c7d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d2982610b12565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d5c57610d5b610cef565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610db1600083610d96565b9150610dbc82610da1565b600082019050919050565b6000610dd282610da4565b9150819050919050565b7f63616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610e12600c83610c43565b9150610e1d82610ddc565b602082019050919050565b60006020820190508181036000830152610e4181610e05565b9050919050565b6000610e5382610b12565b9150610e5e83610b12565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9757610e96610cef565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610edc82610b12565b9150610ee783610b12565b925082610ef757610ef6610ea2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f2181610f02565b8114610f2c57600080fd5b50565b600081519050610f3e81610f18565b92915050565b6000819050919050565b610f5781610f44565b8114610f6257600080fd5b50565b600081519050610f7481610f4e565b92915050565b600081519050610f8981610bea565b92915050565b600080600080600060a08688031215610fab57610faa610a82565b5b6000610fb988828901610f2f565b9550506020610fca88828901610f65565b9450506040610fdb88828901610f7a565b9350506060610fec88828901610f7a565b9250506080610ffd88828901610f2f565b9150509295509295909350565b600061101582610f44565b915061102083610f44565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561105f5761105e610cef565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561109c5761109b610cef565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110d9576110d8610cef565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561111657611115610cef565b5b82820290509291505056fea26469706673582212209d8f196004e4d2ed1d12fd7a677be0a6ad1d62a1599b589d45a80616e37a10d164736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}